# 📋 **MyTubeNavi 2.0 要件定義書**

## 1. **プロジェクト概要**

### **1.1 プロジェクト目的**
既存のMyTubeNaviを、視聴傾向に基づくユーザーマッチングプラットフォームにリニューアルし、同じ動画や類似の嗜好を持つユーザー同士の出会いを提供する。

### **1.2 ビジネス目標**
- **第一目標**：同じ動画・類似傾向の視聴者同士のマッチング機能
- **第二目標**：マッチング精度向上のための視聴・口コミ・評価データ収集
- **第三目標**：持続可能な収益モデルの確立

## 2. **機能要件**

### **2.1 コア機能**

#### **A. マッチング機能**
- **MA-001**: 視聴履歴に基づく類似度計算
- **MA-002**: 段階的マッチング精度調整（厳格→標準→拡張）
- **MA-003**: スワイプ式マッチング操作
- **MA-004**: 相互マッチング成立通知
- **MA-005**: マッチング後のチャット機能

#### **B. 視聴データ収集機能**
- **VD-001**: YouTube動画の視聴履歴記録
- **VD-002**: 動画評価システム（5段階評価）
- **VD-003**: 詳細レビュー・コメント投稿
- **VD-004**: 視聴完了率・視聴時間記録
- **VD-005**: ジャンル・カテゴリ分類

#### **C. プロフィール管理機能**
- **PR-001**: 段階的個人情報開示システム
- **PR-002**: 匿名プロフィール表示
- **PR-003**: 視聴傾向の可視化
- **PR-004**: プライバシーレベル設定

### **2.2 サブ機能**

#### **D. コミュニティ機能**
- **CM-001**: ジャンル別グループマッチング
- **CM-002**: 同時視聴イベント機能
- **CM-003**: 動画推薦・シェア機能

#### **E. 課金・決済機能**
- **PY-001**: 月額サブスクリプション（プレミアム・プロプラン）
- **PY-002**: バーチャルギフト機能
- **PY-003**: 単発課金機能（詳細分析・優先表示）

#### **F. 管理・分析機能**
- **AD-001**: ユーザー行動分析ダッシュボード
- **AD-002**: マッチング成功率分析
- **AD-003**: 収益分析・レポート
- **AD-004**: A/Bテスト機能

## 3. **非機能要件**

### **3.1 性能要件**
- **応答時間**: API応答時間 < 2秒
- **同時接続**: 1,000ユーザー同時利用可能
- **可用性**: 99.5%以上のアップタイム

### **3.2 セキュリティ要件**
- **認証**: Supabase Auth による多要素認証
- **データ保護**: GDPR・個人情報保護法準拠
- **年齢制限**: 18歳未満利用禁止システム
- **コンテンツモデレーション**: 不適切コンテンツ自動検知

### **3.3 プライバシー要件**
- **データ最小化**: 必要最小限の個人情報収集
- **段階的開示**: マッチング段階に応じた情報開示制御
- **データポータビリティ**: ユーザーデータエクスポート機能
- **削除権**: アカウント・データ完全削除機能

## 4. **ユーザー要件**

### **4.1 ターゲットユーザー**
- **主要ユーザー**: 18-35歳のYouTube視聴者
- **地域**: 日本国内（初期リリース）
- **デバイス**: スマートフォン・PC両対応

### **4.2 ユーザーストーリー**

#### **一般ユーザー**
```
As a YouTube視聴者
I want 同じ趣味の人と出会いたい
So that 共通の話題で盛り上がれる友達を作れる
```

#### **プレミアムユーザー**
```
As a 有料会員
I want より詳細なマッチング分析を見たい
So that 理想の相手をより効率的に見つけられる
```

## 5. **制約条件**

### **5.1 技術制約**
- 開発者：1名（個人開発）
- 既存技術スタックの活用必須
- 開発期間：6-8週間

### **5.2 法的制約**
- 出会い系サイト規制法への準拠
- 個人情報保護法への準拠
- YouTube API利用規約への準拠

### **5.3 予算制約**
- インフラコスト：月額5万円以下
- 決済手数料：Stripe標準料金

---

# 🏗️ **MyTubeNavi 2.0 設計書**

## 1. **システム全体設計**

### **1.1 システム構成**
```
┌─────────────────────────────────────────┐
│                Frontend                 │
│     React + TypeScript + PWA           │
│        (Firebase Hosting)              │
└─────────────┬───────────────────────────┘
              │ HTTPS/REST API
┌─────────────▼───────────────────────────┐
│              Backend API                │
│     Node.js + TypeScript + Express     │
│         (Google Cloud Run)             │
└─────────────┬───────────────────────────┘
              │ SQL/RPC
┌─────────────▼───────────────────────────┐
│            Supabase Services           │
│  PostgreSQL + Auth + Edge Functions    │
│           + Realtime + Storage         │
└─────────────┬───────────────────────────┘
              │
┌─────────────▼───────────────────────────┐
│          External Services             │
│   Stripe + Firebase Functions +        │
│      Google Cloud AI/ML APIs          │
└─────────────────────────────────────────┘
```

### **1.2 データフロー**
```
ユーザー操作
    ↓
React Frontend
    ↓ (API Call)
Node.js Backend
    ↓ (Query)
Supabase PostgreSQL
    ↓ (Trigger)
Edge Functions (マッチング計算)
    ↓ (Result)
リアルタイム通知
```

## 2. **データベース設計**

### **2.1 論理データモデル**
```
┌─────────────────┐    ┌─────────────────┐
│   auth.users    │────│ user_profiles   │
│ (Supabase標準) │    │ - nickname      │
└─────────────────┘    │ - age_group     │
                       │ - region        │
                       │ - privacy_level │
                       └─────────┬───────┘
                                 │
┌─────────────────┐             │
│viewing_history  │─────────────┘
│- video_id       │
│- category       │     ┌─────────────────┐
│- rating         │     │matching_        │
│- duration       │     │candidates       │
│- completion_rate│     │- similarity_    │
└─────────────────┘     │  score          │
                        │- common_videos  │
                        │- match_reason   │
                        └─────────┬───────┘
                                  │
┌─────────────────┐              │
│    matches      │──────────────┘
│- user_id_1      │
│- user_id_2      │     ┌─────────────────┐
│- status         │     │  chat_rooms     │
│- matched_at     │─────│- match_id       │
└─────────────────┘     └─────────┬───────┘
                                  │
                        ┌─────────▼───────┐
                        │ chat_messages   │
                        │- sender_id      │
                        │- message        │
                        │- sent_at        │
                        └─────────────────┘
```

### **2.2 物理データモデル**

#### **主要テーブル定義**

```sql
-- ユーザープロフィール
CREATE TABLE user_profiles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    nickname VARCHAR(50),
    age_group VARCHAR(20) CHECK (age_group IN ('10代', '20代前半', '20代後半', '30代前半', '30代後半', '40代以上')),
    region VARCHAR(50),
    bio TEXT CHECK (char_length(bio) <= 500),
    avatar_url TEXT,
    privacy_level INTEGER DEFAULT 1 CHECK (privacy_level BETWEEN 1 AND 4),
    is_age_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 視聴履歴
CREATE TABLE viewing_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    video_id VARCHAR(255) NOT NULL,
    video_title TEXT,
    channel_name TEXT,
    category VARCHAR(100),
    tags TEXT[],
    viewing_duration INTEGER CHECK (viewing_duration >= 0),
    video_length INTEGER CHECK (video_length > 0),
    completion_rate DECIMAL(3,2) CHECK (completion_rate BETWEEN 0.00 AND 1.00),
    user_rating INTEGER CHECK (user_rating BETWEEN 1 AND 5),
    watched_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- インデックス用
    INDEX idx_viewing_history_user_id (user_id),
    INDEX idx_viewing_history_category (category),
    INDEX idx_viewing_history_watched_at (watched_at)
);

-- マッチング候補キャッシュ
CREATE TABLE matching_candidates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    candidate_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    similarity_score DECIMAL(6,5) CHECK (similarity_score BETWEEN 0.00000 AND 1.00000),
    common_videos_count INTEGER DEFAULT 0,
    content_similarity DECIMAL(5,4),
    rating_correlation DECIMAL(5,4),
    viewing_pattern_match DECIMAL(5,4),
    match_reason JSONB,
    calculated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE DEFAULT (NOW() + INTERVAL '24 hours'),
    
    UNIQUE(user_id, candidate_id),
    CHECK (user_id != candidate_id)
);
```

## 3. **API設計**

### **3.1 RESTful API エンドポイント**

#### **認証・ユーザー管理**
```
POST   /api/auth/signup           - ユーザー登録
POST   /api/auth/login            - ログイン
POST   /api/auth/logout           - ログアウト
GET    /api/users/profile         - プロフィール取得
PUT    /api/users/profile         - プロフィール更新
DELETE /api/users/account         - アカウント削除
```

#### **マッチング**
```
GET    /api/matching/candidates   - マッチング候補取得
POST   /api/matching/swipe        - Like/Pass送信
GET    /api/matching/matches      - マッチング一覧
POST   /api/matching/refresh      - 候補再計算
```

#### **チャット**
```
GET    /api/chat/rooms           - チャットルーム一覧
GET    /api/chat/rooms/:id       - メッセージ履歴取得
POST   /api/chat/rooms/:id       - メッセージ送信
```

#### **視聴データ**
```
POST   /api/viewing/track        - 視聴履歴記録
GET    /api/viewing/history      - 視聴履歴取得
POST   /api/viewing/rate         - 動画評価
GET    /api/viewing/analytics    - 視聴分析データ
```

#### **決済**
```
POST   /api/payment/subscribe    - サブスクリプション開始
POST   /api/payment/cancel       - サブスクリプション解約
GET    /api/payment/status       - 決済状況確認
POST   /api/payment/gift         - ギフト送信
```

### **3.2 リアルタイム通信設計**

#### **Supabase Realtime チャンネル**
```typescript
// マッチング通知
supabase
  .channel(`user-${userId}-matches`)
  .on('postgres_changes', {
    event: 'INSERT',
    schema: 'public',
    table: 'matches'
  }, handleNewMatch)

// チャットメッセージ
supabase
  .channel(`chat-room-${roomId}`)
  .on('postgres_changes', {
    event: 'INSERT', 
    schema: 'public',
    table: 'chat_messages'
  }, handleNewMessage)
```

## 4. **UI/UX設計**

### **4.1 画面設計**

#### **主要画面一覧**
```
1. 🏠 ホーム画面
   - 今日のおすすめ動画
   - マッチング候補プレビュー
   - コミュニティ活動状況

2. 🔍 動画発見画面  
   - ジャンル別動画一覧
   - 検索・フィルター機能
   - 評価・レビュー表示

3. 💕 マッチング画面
   - スワイプ式候補表示
   - 詳細プロフィール
   - 共通点可視化

4. 💬 チャット画面
   - マッチング相手一覧
   - メッセージ履歴
   - 動画共有機能

5. 📊 分析画面
   - 視聴傾向グラフ
   - マッチング統計
   - おすすめ改善提案

6. 👤 プロフィール画面
   - 個人情報設定
   - プライバシー設定
   - サブスクリプション管理
```

### **4.2 ユーザージャーニー**

#### **新規ユーザー**
```
1. サインアップ → 2. 年齢認証 → 3. 基本プロフィール設定
    ↓
4. 動画視聴・評価（データ収集） → 5. 初回マッチング候補表示
    ↓
6. マッチング成立 → 7. チャット開始 → 8. 継続利用
```

#### **既存ユーザー**
```
1. ログイン → 2. 新着通知確認 → 3. マッチング/チャット
    ↓
4. 動画視聴・評価 → 5. プレミアム機能利用 → 6. 継続課金
```

## 5. **セキュリティ設計**

### **5.1 認証・認可**
```
レベル1: 匿名アクセス
- トップページ閲覧のみ

レベル2: 認証ユーザー  
- 基本機能利用
- 年齢認証必須

レベル3: 有料会員
- プレミアム機能
- 追加セキュリティ検証

レベル4: 管理者
- システム管理機能
- データ分析機能
```

### **5.2 データ保護**
```
暗号化:
- 保存時: AES-256
- 転送時: TLS 1.3

匿名化:
- ユーザーID: UUID v4
- 分析データ: ハッシュ化

アクセス制御:
- RLS (Row Level Security)
- API レート制限
- IP制限 (管理機能)
```

## 6. **運用設計**

### **6.1 監視・ログ**
```
アプリケーション監視:
- Google Cloud Monitoring
- エラー率・レスポンス時間
- リソース使用量

ビジネス監視:
- MAU/DAU
- マッチング成功率
- 課金転換率
- チャーン率

セキュリティ監視:
- 不正アクセス検知
- 異常な行動パターン
- データ流出検知
```

### **6.2 バックアップ・災害復旧**
```
データバックアップ:
- 日次: 自動フルバックアップ
- 時間毎: 増分バックアップ
- 保持期間: 30日

災害復旧:
- RTO: 4時間以内
- RPO: 1時間以内
- 冗長化: マルチリージョン
```

## 7. **開発・リリース計画**

### **7.1 開発フェーズ**
```
フェーズ1 (2週間): データ基盤整備
- DB設計・マイグレーション
- 認証システム構築
- 基本API実装

フェーズ2 (3週間): コア機能開発  
- マッチングアルゴリズム
- UI/UX実装
- チャット機能

フェーズ3 (2週間): 課金・分析
- Stripe統合
- ダッシュボード
- セキュリティ強化

フェーズ4 (1週間): テスト・リリース
- 統合テスト
- パフォーマンステスト
- 本番デプロイ
```

### **7.2 品質保証**
```
テスト戦略:
- 単体テスト: 80%以上カバレッジ
- 統合テスト: APIエンドポイント全て
- E2Eテスト: 主要ユーザージャーニー
- セキュリティテスト: OWASP Top10対応
```

この要件定義・設計書で**開発着手**に十分でしょうか？
追加で詳細化が必要な部分があれば教えてください！